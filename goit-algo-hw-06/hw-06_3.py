import networkx as nx
import matplotlib.pyplot as plt
import heapq

# Список адміністративних центрів України
cities = [
    "Вінниця", "Дніпро", "Донецьк", "Житомир", "Запоріжжя", 
    "Івано-Франківськ", "Київ", "Кропивницький", "Луганськ", "Луцьк", 
    "Львів", "Миколаїв", "Одеса", "Полтава", "Рівне", 
    "Сімферополь", "Суми", "Тернопіль", "Ужгород", "Харків", 
    "Херсон", "Хмельницький", "Черкаси", "Чернівці", "Чернігів"
]

# Матриця відстаней між адміністративними центрами
distances = {
    "Вінниця": {"Житомир": 125, "Київ": 256, "Хмельницький": 120},
    "Дніпро": {"Запоріжжя": 81, "Кропивницький": 294, "Полтава": 196},
    "Донецьк": {"Луганськ": 148, "Запоріжжя": 217, "Дніпро": 252},
    "Житомир": {"Вінниця": 125, "Київ": 131, "Рівне": 187},
    "Запоріжжя": {"Дніпро": 81, "Донецьк": 217, "Кропивницький": 303},
    "Івано-Франківськ": {"Львів": 135, "Тернопіль": 134, "Чернівці": 143},
    "Київ": {"Житомир": 131, "Чернігів": 149, "Вінниця": 256},
    "Кропивницький": {"Дніпро": 294, "Миколаїв": 174, "Запоріжжя": 303},
    "Луганськ": {"Донецьк": 148, "Харків": 333, "Дніпро": 394},
    "Луцьк": {"Львів": 152, "Рівне": 70, "Тернопіль": 159},
    "Львів": {"Луцьк": 152, "Івано-Франківськ": 135, "Тернопіль": 128},
    "Миколаїв": {"Кропивницький": 174, "Одеса": 120, "Херсон": 51},
    "Одеса": {"Миколаїв": 120, "Херсон": 171, "Кропивницький": 294},
    "Полтава": {"Дніпро": 196, "Суми": 261, "Київ": 337},
    "Рівне": {"Луцьк": 70, "Житомир": 187, "Тернопіль": 162},
    "Сімферополь": {"Херсон": 221, "Миколаїв": 282, "Запоріжжя": 365},
    "Суми": {"Харків": 190, "Полтава": 261, "Київ": 346},
    "Тернопіль": {"Львів": 128, "Івано-Франківськ": 134, "Рівне": 162},
    "Ужгород": {"Львів": 261, "Івано-Франківськ": 280, "Тернопіль": 338},
    "Харків": {"Суми": 190, "Полтава": 337, "Дніпро": 213},
    "Херсон": {"Миколаїв": 51, "Сімферополь": 221, "Запоріжжя": 287},
    "Хмельницький": {"Житомир": 120, "Вінниця": 120, "Тернопіль": 112},
    "Черкаси": {"Київ": 190, "Полтава": 324, "Кропивницький": 126},
    "Чернівці": {"Івано-Франківськ": 143, "Тернопіль": 176, "Хмельницький": 190},
    "Чернігів": {"Київ": 149, "Суми": 350, "Житомир": 271}
}

# Створення графу
G = nx.Graph()

# Додавання вершин
for i, city in enumerate(cities):
    G.add_node(i, label=city)

# Додавання ребер
for i, city1 in enumerate(cities):
    for j, city2 in enumerate(cities):
        if city1 != city2 and city2 in distances.get(city1, {}):
            G.add_edge(i, j, weight=distances[city1][city2])

# Візуалізація графу з круговою розкладкою
plt.figure(figsize=(12, 8))
pos = nx.circular_layout(G)
nx.draw(G, pos, with_labels=True, labels=nx.get_node_attributes(G, 'label'), node_size=500, node_color="skyblue", font_size=10, font_weight="bold")
labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
plt.title("Граф адміністративних центрів України (кругова розкладка)")
plt.show()

# Алгоритм Дейкстри для пошуку найкоротшого шляху
def dijkstra(graph, start, goal):
    queue = [(0, start, [])]
    seen = set()
    while queue:
        (cost, node, path) = heapq.heappop(queue)
        if node in seen:
            continue
        path = path + [node]
        seen.add(node)
        if node == goal:
            return path
        for next_node in graph.neighbors(node):
            if next_node not in seen:
                total_cost = cost + graph[node][next_node]['weight']
                heapq.heappush(queue, (total_cost, next_node, path))
    return None

# Використання алгоритму Дейкстри для знаходження шляхів
start_node = 0  # Вінниця
goal_node = 24  # Чернігів

dijkstra_path = dijkstra(G, start_node, goal_node)

# Виведення результатів
if dijkstra_path:
    print("Шлях, знайдений за допомогою Дейкстри:")
    print(" -> ".join(cities[node] for node in dijkstra_path))
else:
    print("Шлях не знайдено")
